name: deploy-free-tier
on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - run: corepack enable && corepack prepare pnpm@9.7.0 --activate
      - run: pnpm install
      - run: pnpm -r build
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r apps/api/requirements.txt
          python -c "import jwt, strawberry; print('jwt/strawberry OK')"
      - name: API tests
        run: pytest -q apps/api/tests

  rag-eval:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: RAG eval
        env:
          HARD_RAG_EVAL: ${{ secrets.HARD_RAG_EVAL }}
        run: |
          python models/eval/rag_eval_stub.py

  deploy-api-render:
    runs-on: ubuntu-latest
    needs: [build-and-test, rag-eval]
    if: ${{ success() }}
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR (optional)
        if: ${{ secrets.GITHUB_TOKEN != '' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push API image to GHCR (optional)
        if: ${{ secrets.GITHUB_TOKEN != '' }}
        uses: docker/build-push-action@v6
        with:
          context: ./apps/api
          file: ./apps/api/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/aurora-api:latest
            ghcr.io/${{ github.repository_owner }}/aurora-api:${{ github.sha }}
      - name: Deploy to Render (API) — docs
        run: |
          echo "Use Render dashboard or API to deploy Dockerfile at apps/api/Dockerfile."
          echo "Required env: DATABASE_URL, QDRANT_URL, MEILI_URL, ALLOWED_ORIGINS, SUPABASE_JWT_SECRET (optional)."
      - name: Trigger Render deploy via API (optional)
        if: ${{ secrets.RENDER_API_KEY != '' && secrets.RENDER_SERVICE_ID != '' }}
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          curl -s -X POST \
            -H "accept: application/json" \
            -H "authorization: Bearer ${RENDER_API_KEY}" \
            -H "content-type: application/json" \
            https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys \
            -d '{"clearCache":false}'

  deploy-web-vercel:
    runs-on: ubuntu-latest
    needs: [build-and-test, rag-eval]
    if: ${{ success() }}
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Vercel (Web) — docs
        run: |
          echo "Use Vercel with root apps/web."
          echo "Set NEXT_PUBLIC_API_URL to your API URL."
      - name: Deploy to Vercel (optional via token)
        if: ${{ secrets.VERCEL_TOKEN != '' && secrets.VERCEL_ORG_ID != '' && secrets.VERCEL_PROJECT_ID != '' }}
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: apps/web
          vercel-args: "--prod"
