name: ci
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: aurora
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
      meilisearch:
        image: getmeili/meilisearch:v1.7
        ports:
          - 7700:7700
        env:
          MEILI_NO_ANALYTICS: 'true'
        options: >-
          --health-cmd "curl -sS http://localhost:7700/health || exit 1" --health-interval 5s --health-timeout 5s --health-retries 30
      qdrant:
        image: qdrant/qdrant:v1.8.2
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -sS http://localhost:6333/collections || exit 1" --health-interval 5s --health-timeout 5s --health-retries 30
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          # Don't enable pnpm cache here; it tries to call `pnpm store path` before pnpm is installed
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.7.0
          run_install: false
      - run: pnpm --version
      - run: pnpm install
      - name: Typecheck (workspace)
        run: pnpm -r --if-present typecheck
      - run: pnpm -r build
      - name: Web Lint
        run: |
          cd apps/web
          pnpm run lint
      - name: Web Typecheck (tsc)
        run: |
          cd apps/web
          pnpm exec tsc -v
          pnpm exec tsc --noEmit
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Python deps for flows
        run: |
          python -m pip install --upgrade pip
          pip install -r apps/api/requirements.txt
          python -c "import jwt, strawberry; print('jwt/strawberry OK')"
        env:
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/aurora
      - name: Python lint
        run: |
          pip install ruff black pytest
          ruff --version
      - name: Pytest (API unit tests)
        run: |
          pytest -q apps/api/tests
        env:
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/aurora
          PYTHONPATH: .
      - name: Observability smoke (gating)
        run: |
          python - << 'PY'
          import os
          os.environ.setdefault('PYTHONPATH', '.')
          from fastapi.testclient import TestClient
          from apps.api.aurora.main import app
          c = TestClient(app)
          r1 = c.get('/metrics')
          assert r1.status_code == 200 and '# HELP aurora_requests_total' in r1.text
          r2 = c.get('/dev/metrics')
          assert r2.status_code in (200,401)
          print('metrics ok:', len(r1.text), 'dev:', r2.status_code)
          PY
      - name: CI Gates
        run: |
          export PYTHONPATH=.:$PYTHONPATH
          # Light warm-up indexing for retrieval so RAG gates have at least one doc
          python scripts/index_documents.py || true
          python scripts/ci_gates.py
        env:
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/aurora
          PERF_P95_BUDGET_MS: 1500
          SMAPE_MAX: 80
          ERROR_RATE_MAX: 0.02
          ALLOWED_RAG_DOMAINS: example.com
          RAG_MIN_SOURCES: 1
          MEILI_URL: http://localhost:7700
          QDRANT_URL: http://localhost:6333
          # Optional: promote Market Map perf gate into main CI once stable.
          # Set to '1' to enforce /dev/gates/market-perf (defaults to non-gating here).
          CI_MARKET_GATE: '0'
      - name: Postgres smoke (seed and mirror)
        run: |
          export PYTHONPATH=.:$PYTHONPATH
          python scripts/create_sample_data.py
          python flows/mirror_companies_to_postgres.py
        env:
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/aurora
      - name: Data contracts check (GE)
        run: |
          export PYTHONPATH=.:$PYTHONPATH
          python scripts/create_sample_data.py
          python flows/data_contracts_check.py
      - name: Placeholder RAG eval (smoke)
        run: |
          python models/eval/rag_eval_stub.py
      - name: RAG eval summary (non-gating)
        run: |
          python scripts/ci/ragas_summary.py | tee ragas_summary.json
      - name: Job summary (RAG eval)
        run: |
          echo "### RAG eval summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat ragas_summary.json >> $GITHUB_STEP_SUMMARY
      - name: Upload RAG summary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ragas-summary
          path: ragas_summary.json
      - name: Forecast advanced smoke (non-gating)
        run: |
          echo "Smoke advanced forecast" && curl -sS "http://localhost:8000/forecast/backtest/1?metric=mentions&model=adv" || true
        env:
          FORECAST_ADVANCED: '1'
