
=================================== ERRORS ====================================
_____________ ERROR collecting apps/api/tests/test_copilot_m1.py ______________
apps\api\tests\test_copilot_m1.py:3: in <module>
    from aurora.main import app
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
_________ ERROR collecting apps/api/tests/test_gates_status_market.py _________
apps\api\tests\test_gates_status_market.py:2: in <module>
    from aurora.main import app
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
_______________ ERROR collecting apps/api/tests/test_graphql.py _______________
apps\api\tests\test_graphql.py:5: in <module>
    import aurora.main as main
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
______________ ERROR collecting apps/api/tests/test_insights.py _______________
apps\api\tests\test_insights.py:2: in <module>
    import aurora.main as main
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
________ ERROR collecting apps/api/tests/test_insights_enforcement.py _________
apps\api\tests\test_insights_enforcement.py:9: in <module>
    import aurora.main as main
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
____________ ERROR collecting apps/api/tests/test_m2_dashboard.py _____________
apps\api\tests\test_m2_dashboard.py:2: in <module>
    import aurora.main as main
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
_____ ERROR collecting apps/api/tests/test_m2_dashboard_hiring_patents.py _____
apps\api\tests\test_m2_dashboard_hiring_patents.py:4: in <module>
    import aurora.main as main
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
______________ ERROR collecting apps/api/tests/test_m3_alerts.py ______________
apps\api\tests\test_m3_alerts.py:2: in <module>
    import aurora.main as main
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
_________ ERROR collecting apps/api/tests/test_m3_alerts_enriched.py __________
apps\api\tests\test_m3_alerts_enriched.py:2: in <module>
    import aurora.main as main
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
_______ ERROR collecting apps/api/tests/test_m3_alerts_threshold_std.py _______
apps\api\tests\test_m3_alerts_threshold_std.py:4: in <module>
    import aurora.main as main
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
_____ ERROR collecting apps/api/tests/test_m3_deals_forecast_endpoints.py _____
apps\api\tests\test_m3_deals_forecast_endpoints.py:3: in <module>
    from apps.api.aurora.main import app
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
___________ ERROR collecting apps/api/tests/test_m3_dev_metrics.py ____________
apps\api\tests\test_m3_dev_metrics.py:3: in <module>
    from apps.api.aurora.main import app
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
______________ ERROR collecting apps/api/tests/test_m3_extras.py ______________
apps\api\tests\test_m3_extras.py:2: in <module>
    import aurora.main as main
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
______ ERROR collecting apps/api/tests/test_m3_hiring_patents_ingest.py _______
apps\api\tests\test_m3_hiring_patents_ingest.py:4: in <module>
    import aurora.main as main
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
____ ERROR collecting apps/api/tests/test_m3_people_investor_endpoints.py _____
apps\api\tests\test_m3_people_investor_endpoints.py:3: in <module>
    from apps.api.aurora.main import app
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
_____________ ERROR collecting apps/api/tests/test_m3_perf_ego.py _____________
apps\api\tests\test_m3_perf_ego.py:2: in <module>
    import aurora.main as main
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
______________ ERROR collecting apps/api/tests/test_m3_signal.py ______________
apps\api\tests\test_m3_signal.py:2: in <module>
    import aurora.main as main
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
__________ ERROR collecting apps/api/tests/test_m3_signal_config.py ___________
apps\api\tests\test_m3_signal_config.py:3: in <module>
    import aurora.main as main
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
__________ ERROR collecting apps/api/tests/test_m3_signal_details.py __________
apps\api\tests\test_m3_signal_details.py:4: in <module>
    import aurora.main as main
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
________ ERROR collecting apps/api/tests/test_m4_forecast_backtest.py _________
apps\api\tests\test_m4_forecast_backtest.py:3: in <module>
    from apps.api.aurora.main import app
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
_______ ERROR collecting apps/api/tests/test_m4_trends_changepoints.py ________
apps\api\tests\test_m4_trends_changepoints.py:4: in <module>
    import aurora.main as main
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
_____________ ERROR collecting apps/api/tests/test_m5_m9_depth.py _____________
apps\api\tests\test_m5_m9_depth.py:2: in <module>
    import aurora.main as main
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
______ ERROR collecting apps/api/tests/test_m6_field_level_citations.py _______
apps\api\tests\test_m6_field_level_citations.py:2: in <module>
    import aurora.main as main
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
_________ ERROR collecting apps/api/tests/test_m7_playbook_export.py __________
apps\api\tests\test_m7_playbook_export.py:3: in <module>
    from apps.api.aurora.main import app
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
______ ERROR collecting apps/api/tests/test_m9_ci_gates_observability.py ______
apps\api\tests\test_m9_ci_gates_observability.py:3: in <module>
    from apps.api.aurora.main import app
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
_____________ ERROR collecting apps/api/tests/test_m9_ci_guard.py _____________
apps\api\tests\test_m9_ci_guard.py:5: in <module>
    import aurora.main as main
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
___________ ERROR collecting apps/api/tests/test_m9_ci_perf_gate.py ___________
apps\api\tests\test_m9_ci_perf_gate.py:3: in <module>
    from apps.api.aurora.main import app
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
__ ERROR collecting apps/api/tests/test_m9_evals_and_forecast_thresholds.py ___
apps\api\tests\test_m9_evals_and_forecast_thresholds.py:3: in <module>
    from apps.api.aurora.main import app
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
___________ ERROR collecting apps/api/tests/test_m9_market_gate.py ____________
apps\api\tests\test_m9_market_gate.py:3: in <module>
    from apps.api.aurora.main import app
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
________ ERROR collecting apps/api/tests/test_metrics_observability.py ________
apps\api\tests\test_metrics_observability.py:2: in <module>
    from apps.api.aurora.main import app
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
_________ ERROR collecting apps/api/tests/test_metrics_prometheus.py __________
apps\api\tests\test_metrics_prometheus.py:2: in <module>
    from aurora.main import app
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
___________ ERROR collecting apps/api/tests/test_ops_eval_graph.py ____________
apps\api\tests\test_ops_eval_graph.py:2: in <module>
    import aurora.main as main
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
____________ ERROR collecting apps/api/tests/test_phase2_basics.py ____________
apps\api\tests\test_phase2_basics.py:2: in <module>
    from apps.api.aurora.main import app, settings
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
__________ ERROR collecting apps/api/tests/test_phase2_endpoints.py ___________
apps\api\tests\test_phase2_endpoints.py:2: in <module>
    import aurora.main as main
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
_________ ERROR collecting apps/api/tests/test_phase4_usage_quota.py __________
apps\api\tests\test_phase4_usage_quota.py:4: in <module>
    from apps.api.aurora.main import app
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
______________ ERROR collecting apps/api/tests/test_post_auth.py ______________
apps\api\tests\test_post_auth.py:10: in <module>
    import aurora.main as main
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
_________ ERROR collecting apps/api/tests/test_trends_refresh_dev.py __________
apps\api\tests\test_trends_refresh_dev.py:2: in <module>
    import aurora.main as main
apps\api\aurora\main.py:1643: in <module>
    @app.post("/copilot/ask")
..\anaconda3\Lib\site-packages\fastapi\routing.py:992: in decorator
    self.add_api_route(
..\anaconda3\Lib\site-packages\fastapi\routing.py:931: in add_api_route
    route = route_class(
..\anaconda3\Lib\site-packages\fastapi\routing.py:552: in __init__
    self.dependant = get_dependant(path=self.path_format, call=self.endpoint)
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:268: in get_dependant
    param_details = analyze_param(
..\anaconda3\Lib\site-packages\fastapi\dependencies\utils.py:469: in analyze_param
    field = create_model_field(
..\anaconda3\Lib\site-packages\fastapi\utils.py:98: in create_model_field
    raise fastapi.exceptions.FastAPIError(
E   fastapi.exceptions.FastAPIError: Invalid args for response field! Hint: check that typing.Optional[starlette.requests.Request] is a valid Pydantic field type. If you are using a return type annotation that is not a valid Pydantic field (e.g. Union[Response, dict, None]) you can disable generating the response model from the type annotation with the path operation decorator parameter response_model=None. Read more: https://fastapi.tiangolo.com/tutorial/response-model/
============================== warnings summary ===============================
..\anaconda3\Lib\site-packages\starlette\formparsers.py:12
  C:\Users\jella\anaconda3\Lib\site-packages\starlette\formparsers.py:12: PendingDeprecationWarning: Please use `import python_multipart` instead.
    import multipart

..\anaconda3\Lib\site-packages\pydantic\_internal\_config.py:291
  C:\Users\jella\anaconda3\Lib\site-packages\pydantic\_internal\_config.py:291: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.8/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

..\anaconda3\Lib\site-packages\paramiko\pkey.py:82
  C:\Users\jella\anaconda3\Lib\site-packages\paramiko\pkey.py:82: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from this module in 48.0.0.
    "cipher": algorithms.TripleDES,

..\anaconda3\Lib\site-packages\paramiko\transport.py:219
  C:\Users\jella\anaconda3\Lib\site-packages\paramiko\transport.py:219: CryptographyDeprecationWarning: Blowfish has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.Blowfish and will be removed from this module in 45.0.0.
    "class": algorithms.Blowfish,

..\anaconda3\Lib\site-packages\paramiko\transport.py:243
  C:\Users\jella\anaconda3\Lib\site-packages\paramiko\transport.py:243: CryptographyDeprecationWarning: TripleDES has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES and will be removed from this module in 48.0.0.
    "class": algorithms.TripleDES,

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR apps/api/tests/test_copilot_m1.py - fastapi.exceptions.FastAPIError: In...
ERROR apps/api/tests/test_gates_status_market.py - fastapi.exceptions.FastAPI...
ERROR apps/api/tests/test_graphql.py - fastapi.exceptions.FastAPIError: Inval...
ERROR apps/api/tests/test_insights.py - fastapi.exceptions.FastAPIError: Inva...
ERROR apps/api/tests/test_insights_enforcement.py - fastapi.exceptions.FastAP...
ERROR apps/api/tests/test_m2_dashboard.py - fastapi.exceptions.FastAPIError: ...
ERROR apps/api/tests/test_m2_dashboard_hiring_patents.py - fastapi.exceptions...
ERROR apps/api/tests/test_m3_alerts.py - fastapi.exceptions.FastAPIError: Inv...
ERROR apps/api/tests/test_m3_alerts_enriched.py - fastapi.exceptions.FastAPIE...
ERROR apps/api/tests/test_m3_alerts_threshold_std.py - fastapi.exceptions.Fas...
ERROR apps/api/tests/test_m3_deals_forecast_endpoints.py - fastapi.exceptions...
ERROR apps/api/tests/test_m3_dev_metrics.py - fastapi.exceptions.FastAPIError...
ERROR apps/api/tests/test_m3_extras.py - fastapi.exceptions.FastAPIError: Inv...
ERROR apps/api/tests/test_m3_hiring_patents_ingest.py - fastapi.exceptions.Fa...
ERROR apps/api/tests/test_m3_people_investor_endpoints.py - fastapi.exception...
ERROR apps/api/tests/test_m3_perf_ego.py - fastapi.exceptions.FastAPIError: I...
ERROR apps/api/tests/test_m3_signal.py - fastapi.exceptions.FastAPIError: Inv...
ERROR apps/api/tests/test_m3_signal_config.py - fastapi.exceptions.FastAPIErr...
ERROR apps/api/tests/test_m3_signal_details.py - fastapi.exceptions.FastAPIEr...
ERROR apps/api/tests/test_m4_forecast_backtest.py - fastapi.exceptions.FastAP...
ERROR apps/api/tests/test_m4_trends_changepoints.py - fastapi.exceptions.Fast...
ERROR apps/api/tests/test_m5_m9_depth.py - fastapi.exceptions.FastAPIError: I...
ERROR apps/api/tests/test_m6_field_level_citations.py - fastapi.exceptions.Fa...
ERROR apps/api/tests/test_m7_playbook_export.py - fastapi.exceptions.FastAPIE...
ERROR apps/api/tests/test_m9_ci_gates_observability.py - fastapi.exceptions.F...
ERROR apps/api/tests/test_m9_ci_guard.py - fastapi.exceptions.FastAPIError: I...
ERROR apps/api/tests/test_m9_ci_perf_gate.py - fastapi.exceptions.FastAPIErro...
ERROR apps/api/tests/test_m9_evals_and_forecast_thresholds.py - fastapi.excep...
ERROR apps/api/tests/test_m9_market_gate.py - fastapi.exceptions.FastAPIError...
ERROR apps/api/tests/test_metrics_observability.py - fastapi.exceptions.FastA...
ERROR apps/api/tests/test_metrics_prometheus.py - fastapi.exceptions.FastAPIE...
ERROR apps/api/tests/test_ops_eval_graph.py - fastapi.exceptions.FastAPIError...
ERROR apps/api/tests/test_phase2_basics.py - fastapi.exceptions.FastAPIError:...
ERROR apps/api/tests/test_phase2_endpoints.py - fastapi.exceptions.FastAPIErr...
ERROR apps/api/tests/test_phase4_usage_quota.py - fastapi.exceptions.FastAPIE...
ERROR apps/api/tests/test_post_auth.py - fastapi.exceptions.FastAPIError: Inv...
ERROR apps/api/tests/test_trends_refresh_dev.py - fastapi.exceptions.FastAPIE...
!!!!!!!!!!!!!!!!!! Interrupted: 37 errors during collection !!!!!!!!!!!!!!!!!!!
